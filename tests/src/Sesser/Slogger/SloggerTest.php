<?php

namespace Sesser\Slogger;

/**
 * Test class for Logger.
 * Generated by PHPUnit on 2012-06-28 at 17:24:05.
 * @ignore
 */
class SloggerTest extends \PHPUnit_Framework_TestCase
{

	/**
	 * @var Logger
	 */
	protected $object;
	protected $file_config;
	protected $file;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp()
	{
		$this->file = dirname(__FILE__) . DIRECTORY_SEPARATOR . basename(__FILE__) . '.log';
		$this->file_config = array(
			'provider' => 'File',
			'settings' => array(
				'enabled' => true,
				'level' => \Sesser\Slogger\Slogger::LOG_LEVEL_DEBUG,
				'logfile' => $this->file
			)			
		);
		
		Slogger::configure(__CLASS__, $this->file_config);
		$this->object = Slogger::Get(__CLASS__);
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown()
	{
		unlink($this->file);
	}

	/**
	 * @covers Sesser\Slogger\Slogger::Get
	 * @todo Implement testGet().
	 */
	public function testGet()
	{
		Slogger::configure(__METHOD__, $this->file_config);
		$logger = Slogger::get(__METHOD__);
		$this->assertInstanceOf('\Sesser\Slogger\ISlogger', $logger);
		$this->assertInstanceOf('\Sesser\Slogger\Providers\File', $logger);
		$this->assertInstanceOf('\Sesser\Slogger\ISlogger', $this->object);
		
	}

	/**
	 * @covers Sesser\Slogger\Slogger::Configure
	 * @todo Implement testConfigure().
	 */
	public function testConfigure()
	{
		$file1 = dirname(__FILE__) . '/file1.log';
		$file2 = dirname(__FILE__) . '/file2.log';
		$this->file_config['settings']['logfile'] = $file1;
		Slogger::configure(__METHOD__, $this->file_config);
		$logger = Slogger::Get(__METHOD__);
		$this->assertInstanceOf('\Sesser\Slogger\ISlogger', $logger);
		$this->assertFileExists($file1);
		$this->file_config['settings']['logfile'] = $file2;
		Slogger::configure(__METHOD__, $this->file_config);
		$logger = Slogger::Get(__METHOD__);
		$this->assertFileExists($file2);
		unlink($file2);
		unlink($file1);
		
	}

	/**
	 * @covers Sesser\Slogger\Slogger::IsDebugEnabled
	 * @todo Implement testIsDebugEnabled().
	 */
	public function testIsDebugEnabled()
	{
		$this->config['settings']['level'] = Slogger::LOG_LEVEL_DEBUG;
		Slogger::configure(__METHOD__, $this->file_config);
		$logger = Slogger::Get(__METHOD__);
		$this->assertTrue($logger->IsDebugEnabled());		
	}

	/**
	 * @covers Sesser\Slogger\Slogger::IsInfoEnabled
	 * @todo Implement testIsInfoEnabled().
	 */
	public function testIsInfoEnabled()
	{
		$this->config['settings']['level'] = Slogger::LOG_LEVEL_INFO;
		Slogger::configure(__METHOD__, $this->file_config);
		$logger = Slogger::Get(__METHOD__);
		$this->assertTrue($logger->IsInfoEnabled());
	}

	/**
	 * @covers Sesser\Slogger\Slogger::IsWarnEnabled
	 * @todo Implement testIsWarnEnabled().
	 */
	public function testIsWarnEnabled()
	{
		$this->config['settings']['level'] = Slogger::LOG_LEVEL_WARN;
		Slogger::configure(__METHOD__, $this->file_config);
		$logger = Slogger::Get(__METHOD__);
		$this->assertTrue($logger->IsWarnEnabled());
	}

	/**
	 * @covers Sesser\Slogger\Slogger::IsErrorEnabled
	 * @todo Implement testIsErrorEnabled().
	 */
	public function testIsErrorEnabled()
	{
		$this->config['settings']['level'] = Slogger::LOG_LEVEL_ERROR;
		Slogger::configure(__METHOD__, $this->file_config);
		$logger = Slogger::Get(__METHOD__);
		$this->assertTrue($logger->IsErrorEnabled());
	}
	
	public function testEnabled()
	{
		$this->file_config['settings']['enabled'] = false;
		$this->file_config['settings']['level'] = Slogger::LOG_LEVEL_DEBUG;
		Slogger::configure(__METHOD__, $this->file_config);
		$logger = Slogger::Get(__METHOD__);
		$this->assertFalse($logger->IsDebugEnabled());
		$this->assertFalse($logger->IsInfoEnabled());
		$this->assertFalse($logger->IsWarnEnabled());
		$this->assertFalse($logger->IsErrorEnabled());

		$this->file_config['settings']['level'] = Slogger::LOG_LEVEL_INFO;
		Slogger::configure(__METHOD__, $this->file_config);
		$logger = Slogger::Get(__METHOD__, true);
		$this->assertFalse($logger->IsDebugEnabled());
		$this->assertFalse($logger->IsInfoEnabled());
		$this->assertFalse($logger->IsWarnEnabled());
		$this->assertFalse($logger->IsErrorEnabled());
		
		$this->file_config['settings']['level'] = Slogger::LOG_LEVEL_WARN;
		Slogger::configure(__METHOD__, $this->file_config);
		$logger = Slogger::Get(__METHOD__, true);
		$this->assertFalse($logger->IsDebugEnabled());
		$this->assertFalse($logger->IsInfoEnabled());
		$this->assertFalse($logger->IsWarnEnabled());
		$this->assertFalse($logger->IsErrorEnabled());
		
		$this->file_config['settings']['level'] = Slogger::LOG_LEVEL_ERROR;
		Slogger::configure(__METHOD__, $this->file_config);
		$logger = Slogger::Get(__METHOD__, true);
		$this->assertFalse($logger->IsDebugEnabled());
		$this->assertFalse($logger->IsInfoEnabled());
		$this->assertFalse($logger->IsWarnEnabled());
		$this->assertFalse($logger->IsErrorEnabled());
	}

}
