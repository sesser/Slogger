<?php

namespace Sesser\Slogger\Providers;

/**
 * Test class for Mongodb.
 * Generated by PHPUnit on 2012-06-30 at 11:13:56.
 * @ignore
 */
class MongodbTest extends \PHPUnit_Framework_TestCase
{

	/**
	 * @var Mongodb
	 */
	protected $object;
	
	protected $m;
	protected $coll;
	protected $name;
	protected $dbname;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp()
	{
		$this->name = 'mongodbtest';
		$this->dbname = strtolower(preg_replace('/[^a-z0-9]/i', '_', basename(__FILE__)));
		$this->object = Mongodb::GetLogger($this->name, array(
			'enabled'	=> true,
			'level'		=> \Sesser\Slogger\Slogger::LOG_LEVEL_DEBUG,
			'server'	=> array(
				'db'	=> $this->dbname
			)
		));
		$this->m = new \Mongo();
		$this->coll = $this->m->selectCollection($this->dbname, $this->name);
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown()
	{
		
	}

	/**
	 * @covers Sesser\Slogger\Providers\Mongodb::GetLogger
	 */
	public function testGetLogger()
	{
		// Remove the following lines when you implement this test.
		$this->assertInstanceOf('\Sesser\Slogger\Providers\Mongodb', $this->object);
	}
	
	/**
	 * @expectedException \Sesser\Slogger\SloggerException 
	 */
	public function testConstructorException()
	{
		$log = Mongodb::GetLogger('exceptiontest', array(
			'server' => array('dsn' => 'mongodb://doesnotexist.foo:27017')
		));
	}
	
	/**
	 * @expectedException \Sesser\Slogger\SloggerException 
	 */
	public function testConstructorExceptionWithUserPass()
	{
		$log = Mongodb::GetLogger('exceptiontest', array(
			'server' => array('dsn' => 'mongodb://testuser:testpass@doesnotexist.foo:27017')
		));
	}
	/**
	 * @covers Sesser\Slogger\Providers\Mongodb::log 
	 */
	public function testDebug()
	{
		
		$this->object->Debug("Test Debug");
		$c = $this->coll->find(array(
			'level' => 'DEBUG',
			'message' => 'Test Debug'
		));
		$this->assertEquals(1, $c->count());
		$this->coll->remove();
	}
	
	public function testInfo()
	{
		$this->object->Info("Test Info");
		$c = $this->coll->find(array(
			'level' => 'INFO',
			'message' => 'Test Info'
		));
		$this->assertEquals(1, $c->count());
		$this->coll->remove();
	}
	
	public function testWarn()
	{
		$this->object->Warn("Test Warn");
		$c = $this->coll->find(array(
			'level' => 'WARN',
			'message' => 'Test Warn'
		));
		$this->assertEquals(1, $c->count());
		$this->coll->remove();
	}
	
	public function testError()
	{
		$this->object->Error("Test Error");
		$c = $this->coll->find(array(
			'level' => 'ERROR',
			'message' => 'Test Error'
		));
		$this->assertEquals(1, $c->count());
		$this->coll->remove();
	}
	
	public function testException()
	{
		$this->object->Error(new \Exception("Test Exception"));
		$c = $this->coll->find(array(
			'level' => 'EXCEPTION'
		));
		$this->assertEquals(1, $c->count());
		$this->coll->remove();
	}

}

?>
